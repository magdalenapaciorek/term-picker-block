{"version":3,"file":"picker/index.js","mappings":"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","sources":["webpack://picker/./src/picker/edit.js","webpack://picker/./src/picker/editor.scss","webpack://picker/external window [\"wp\",\"blockEditor\"]","webpack://picker/external window [\"wp\",\"blocks\"]","webpack://picker/external window [\"wp\",\"components\"]","webpack://picker/external window [\"wp\",\"data\"]","webpack://picker/external window [\"wp\",\"i18n\"]","webpack://picker/external window \"ReactJSXRuntime\"","webpack://picker/webpack/bootstrap","webpack://picker/webpack/runtime/compat get default export","webpack://picker/webpack/runtime/define property getters","webpack://picker/webpack/runtime/hasOwnProperty shorthand","webpack://picker/webpack/runtime/make namespace object","webpack://picker/./src/picker/index.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { InspectorControls, useBlockProps } from '@wordpress/block-editor';\nimport { PanelBody, SelectControl, Spinner } from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\nimport './editor.scss';\n\nconst taxonomyToAttribute = {\n\tcategory: 'categories',\n\tpost_tag: 'tags',\n};\n\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { selectedTaxonomy } = attributes;\n\tconst blockProps = useBlockProps();\n\tconst { editPost } = useDispatch( 'core/editor' );\n\n\t// Map built-in taxonomies like \"category\" and \"post_tag\" to the correct attribute names used in the post object.\n\tconst attributeName =\n\t\ttaxonomyToAttribute[ selectedTaxonomy ] || selectedTaxonomy;\n\n\tconst {\n\t\ttaxonomies = [],\n\t\tterms = [],\n\t\tselectedTerms = [],\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEditedPostAttribute } = select( 'core/editor' );\n\t\t\tconst { getTaxonomies, getEntityRecords } = select( 'core' );\n\n\t\t\tconst postType = getEditedPostAttribute( 'type' );\n\t\t\tif ( ! postType ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tconst taxonomies = getTaxonomies( { type: postType } );\n\t\t\tconst terms = selectedTaxonomy\n\t\t\t\t? getEntityRecords( 'taxonomy', selectedTaxonomy, {\n\t\t\t\t\t\tper_page: -1,\n\t\t\t\t  } )\n\t\t\t\t: [];\n\n\t\t\tconst selectedTerms = selectedTaxonomy\n\t\t\t\t? getEditedPostAttribute( attributeName ) || []\n\t\t\t\t: [];\n\n\t\t\treturn { taxonomies, terms, selectedTerms };\n\t\t},\n\t\t[ selectedTaxonomy ]\n\t);\n\n\tif ( ! taxonomies ) {\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<p>{ __( 'No taxonomies available.', 'term-picker-block' ) }</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\t// Get the first selected term ID as a string, or an empty string if no term is selected.\n\tconst selectedTermID =\n\t\tselectedTerms.length > 0 ? String( selectedTerms[ 0 ] ) : '';\n\n\tconst taxonomyOptions = [\n\t\t{ label: __( 'Select a taxonomy', 'term-picker-block' ), value: '' },\n\t\t...taxonomies.map( ( taxonomy ) => ( {\n\t\t\tlabel: taxonomy.name,\n\t\t\tvalue: taxonomy.slug,\n\t\t} ) ),\n\t];\n\n\tconst termOptions =\n\t\tterms && terms.length > 0\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __( 'Select a term', 'term-picker-block' ),\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t},\n\t\t\t\t\t...terms.map( ( term ) => ( {\n\t\t\t\t\t\tlabel: term.name,\n\t\t\t\t\t\tvalue: String( term.id ),\n\t\t\t\t\t} ) ),\n\t\t\t  ]\n\t\t\t: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __( 'No terms found', 'term-picker-block' ),\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t},\n\t\t\t  ];\n\n\tconst onSelectTaxonomy = ( value ) => {\n\t\tsetAttributes( { selectedTaxonomy: value } );\n\t};\n\n\tconst onSelectTerm = ( termId ) => {\n\t\tif ( ! selectedTaxonomy ) return;\n\t\teditPost( {\n\t\t\t[ attributeName ]: [ parseInt( termId, 10 ) ],\n\t\t} );\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody\n\t\t\t\t\ttitle={ __( 'Block Settings', 'term-picker-block' ) }\n\t\t\t\t>\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={ __( 'Pick a taxonomy', 'term-picker-block' ) }\n\t\t\t\t\t\tvalue={ selectedTaxonomy }\n\t\t\t\t\t\toptions={ taxonomyOptions }\n\t\t\t\t\t\tonChange={ onSelectTaxonomy }\n\t\t\t\t\t/>\n\t\t\t\t\t{ selectedTaxonomy &&\n\t\t\t\t\t\t( ! terms ? (\n\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<SelectControl\n\t\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t\t'Pick a term',\n\t\t\t\t\t\t\t\t\t'term-picker-block'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tvalue={ selectedTermID }\n\t\t\t\t\t\t\t\toptions={ termOptions }\n\t\t\t\t\t\t\t\tonChange={ onSelectTerm }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) ) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<div { ...blockProps }>\n\t\t\t\t{ ! selectedTaxonomy ? (\n\t\t\t\t\t// Taxonomy select when none selected\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\toptions={ taxonomyOptions }\n\t\t\t\t\t\tonChange={ onSelectTaxonomy }\n\t\t\t\t\t/>\n\t\t\t\t) : terms ? (\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tvalue={ selectedTermID }\n\t\t\t\t\t\toptions={ termOptions }\n\t\t\t\t\t\tonChange={ onSelectTerm }\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<Spinner />\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</>\n\t);\n}\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from \"@wordpress/blocks\";\n\n/**\n * Internal dependencies\n */\nimport Edit from \"./edit\";\nimport metadata from \"./block.json\";\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nregisterBlockType(metadata.name, {\n\t/**\n\t * @see ./edit.js\n\t */\n\tedit: Edit,\n});\n"],"names":["__","InspectorControls","useBlockProps","PanelBody","SelectControl","Spinner","useSelect","useDispatch","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","taxonomyToAttribute","category","post_tag","Edit","attributes","setAttributes","selectedTaxonomy","blockProps","editPost","attributeName","taxonomies","terms","selectedTerms","select","getEditedPostAttribute","getTaxonomies","getEntityRecords","postType","type","per_page","children","selectedTermID","length","String","taxonomyOptions","label","value","map","taxonomy","name","slug","termOptions","term","id","onSelectTaxonomy","onSelectTerm","termId","parseInt","title","options","onChange","registerBlockType","metadata","edit"],"sourceRoot":""}